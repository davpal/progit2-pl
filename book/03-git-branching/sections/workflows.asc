=== Przepływ pracy rozgałęziania

Teraz gdy już znasz podstawy rozgałęziania i scalania, do czego możesz je wykorzystać?
W tej sekcji omówimy częste przepływy pracy, na które pozwala nam rozgałęzianie, byś mógł zdecydować czy chcesz je dołączyć do swojego cyklu wytwarzania.

==== Długoterminowe rozgałęzianie

(((branches, long-running)))
Ponieważ Git używa prostej, podobnej do drzewa struktury scalania, wielokrotne scalanie z jednej gałęzi do drugiej długim czasie jest łatwe do wykonania.
To oznacza, że możesz mieć wiele gałęzi które są zawsze otwarte i możesz ich używać w różnych etapach swojego cyklu wytwarzania; możesz regularnie scalać je w inne.

Wielu deweloperów Gita stosuje przepływ, który obejmuje podejście, w którym kod, który jest całkowicie stabilny jest przechowywany w ich gałęzi `master` - prawdopodobnie jedyny kod który był lub będzie wypuszczony. 
Mają kolejną równoległą gałąź nazwaną `develop` lub `next` w której pracują lub używają do testowania stabilności - nie koniecznie jest zawsze stabilna, ale gdy tylko osiągnie stabilność, może zostać scalona do gałęzi `master`.
Jest używana do ściągania w gałęzie tematyczne (krótkoterminowe gałęzie, takie jak wcześniejsza gałąź `iss53`) gdy są gotowe, by upewnić się, że przechodzą wszelkie testy i nie wprowadzają błędów.

W rzeczywistości, mówimy o wskaźnikach poruszających się po linii rewizji które tworzysz.
Stabilne gałęzie są w tyle na linii w historii rewizji, a rozwijane są w górze historii.

.Liniowy widok progresywnie stabilnego rozgałęziania
image::images/lr-branches-1.png[A linear view of progressive-stability branching.]

Jest łatwiej myśleć o nich jak o przestrzeni roboczej, gdzie rewizje stopniowo przemieniają ją w coraz stabilniejszą wersję gdy są w pełni przetestowane.

[[lrbranch_b]]
.Widok ``przestrzeni'' progresywnie stabilnego rozgałęziania
image::images/lr-branches-2.png[A ``silo'' view of progressive-stability branching.]

Możesz tak robić dla różnych poziomów stabilności.
Niektóre większe projekty także mają gałąź `proposed` lub `pu` (proposed updates), która ma zintegrowane gałęzie, które mogą nie być gotowe by zostać scalone do gałęzi `next` lub `master`.
Idea jest taka, że twoje gałęzie są na różnych poziomach stabilności; gdy są gotowe by osiągnąć bardziej stabilny poziom, są scalane do gałęzi nad nimi.
Ponownie, posiadanie wielu długoterminowych gałęzi nie jest konieczne, ale często pomocne, zwłaszcza gdy zajmujesz się dużymi i złożonymi projektami.

[[_topic_branch]]
==== Gałęzie Tematyczne

(((branches, topic)))
Gałęzie tematyczne, są użyteczne w projektach wszelakiej wielkości.
Gałąź tematyczna to krótkoterminowa gałąź, którą tworzysz i używasz dla jednej konkretnej właściwości lub powiązanej pracy.
To jest coś czego jeszcze prawdopodobnie nigdy nie robiłeś z VCS ponieważ jest zazwyczaj zbyt kosztowne by tworzyć i scalać nowe gałęzie.
Ale w Gicie częste jest tworzenie, pracowanie, scalanie i usuwanie gałęzi wielokrotnie w ciągu dnia.

Widziałeś to w poprzedniej sekcji z gałęziami `iss53` i `hotfix`, które stworzyłeś.
Potworzyłeś kilka rewizji na nich i usunąłeś bezpośrednio po scaleniu ich do swojej głównej gałęzi.
Taka technika pozwana ci na szybkie zmienianie kontekstu - ponieważ twoja praca jest oddzielona w przestrzeni gdzie wszystkie zmiany w tej gałęzi muszą być powiązane z tym tematem, jest łatwiej zobaczyć co się stało podczas przeglądu kodu itp.
Możesz zachować tam zmiany na minuty, dnie lub miesiące i scalić je gdy będziesz gotowy, bez względu na kolejność w której zostały utworzone czy były rozwijane.


Rozważ przykład pracowania (na `master`), utworzenia nowej gałęzi (`iss91`), pracowanie na niej przez chwilę, utworzenie z niej kolejnej gałęzi by spróbować innego podejścia do tego samego problemu (`iss91v2`), wracanie do swojej głównej gałęzi i pracowanie tam przez chwilę, potem utworzenia nowej gałęzi by popracować nad czymś co niekoniecznie jest dobrym pomysłem (gałąź `dumbidea`).
Twoja historia rewizji będzie wyglądała mniej więcej tak:

.Wiele tematycznych gałęzi
image::images/topic-branches-1.png[Multiple topic branches.]

Teraz, powiedzmy, że zdecydujesz, że podoba ci się to drugie podejście do problemu (`iss91v2`); i pokazałeś gałąź `dumbidea` współpracownikom i okazało się, że to genialny pomysł.
Możesz wyrzucić oryginalną gałąź `iss91` (utrata rewizji `C5` i `C6`) i scalić pozostałe dwie.
Twoja historia wtedy będzie wyglądała tak:

.Historia po scaleniu `dumbidea` i `iss91v2`
image::images/topic-branches-2.png[History after merging `dumbidea` and `iss91v2`.]

O szczegółach różnych przepływów, których możesz użyć w swoim projekcie Gita omówimy w <<_distributed_git>>, więc zanim zdecydujesz się, który schemat rozgałęziania użyjesz w swoim następnym projekcie, przeczytaj ten rozdział.

Ważne jest by pamiętać podczas robienia tego wszystkiego, że te gałęzie są całkowicie lokalne.
Gdy rozgałęziasz i scalasz, wszystko jest wykonywane tylko w twoim repozytorium gita - nie ma żadnej komunikacji z serwerem.
